# CI/CD Pipeline for Low-Code Platform
#
# This workflow provides automated testing, building, and deployment for the project.
# It uses npm as the package manager and Node.js 18 as the runtime.
#
# WORKFLOW STRUCTURE:
# ==================
# Required Jobs (must pass for deployment):
#   - lint: Code quality checks (ESLint, Prettier, TypeScript)
#   - build: Build verification for all app modes (designer, admin, mobile)
#
# Optional Jobs (won't block pipeline):
#   - security: npm audit for dependency vulnerabilities
#
# Skipped Jobs (not configured yet):
#   - test: Unit tests (waiting for Vitest/Jest setup)
#   - e2e: End-to-end tests (waiting for Playwright setup)
#   - performance: Performance testing (waiting for Lighthouse setup)
#
# Deployment Jobs (conditional):
#   - deploy-staging: Deploys to staging on 'develop' branch
#   - deploy-production: Deploys to production on 'main' branch
#
# FUTURE ENHANCEMENTS:
# ===================
# TODO: Add Vitest for unit testing and enable 'test' job
# TODO: Add Playwright for e2e testing and enable 'e2e' job
# TODO: Configure Lighthouse CI for performance testing
# TODO: Add Trivy for container security scanning
# TODO: Add visual regression testing
# TODO: Add automated changelog generation

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # REQUIRED JOBS - These must pass for deployment to proceed
  # ============================================================================

  # 代码质量检查 (Code Quality Checks)
  # Runs linting, type checking, and format validation
  # This is a REQUIRED job that blocks deployment if it fails
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 类型检查
        run: npm run type-check

      - name: ESLint 检查
        run: npm run lint

      - name: Prettier 格式检查
        run: npm run format:check

      - name: 上传 lint 结果
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-report.txt

  # ============================================================================
  # SKIPPED JOBS - Not currently active
  # ============================================================================

  # 单元测试 (Unit Tests)
  # STATUS: SKIPPED
  # REASON: No test framework configured yet (Vitest/Jest not set up)
  # TODO: Enable this job once test framework is configured
  # TODO: Add test:unit script to package.json with actual test runner
  # TODO: Configure code coverage reporting
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    if: false # Skip until test framework is configured
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 运行单元测试
        run: npm run test:unit --coverage

      - name: 上传覆盖率报告到 Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 上传测试结果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/

  # 构建测试 (Build Verification)
  # Tests building all application modes to ensure they compile successfully
  # This is a REQUIRED job that blocks deployment if it fails
  # Builds: designer, admin, mobile
  build:
    name: 构建测试
    runs-on: ubuntu-latest
    needs: [lint] # Removed 'test' dependency as it's skipped
    strategy:
      matrix:
        # Test all application modes: designer, admin, mobile
        build-mode: [designer, admin, mobile]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 构建项目 (${{ matrix.build-mode }})
        run: npm run build:${{ matrix.build-mode }}

      - name: 验证构建产物
        run: |
          echo "Checking build output for ${{ matrix.build-mode }}..."
          ls -la dist/

      # Optional: Bundle analysis (can be enabled when needed)
      # - name: 分析构建产物
      #   if: matrix.build-mode == 'designer'
      #   run: npm run build:analyze
      #   continue-on-error: true

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.build-mode }}
          path: dist/
          retention-days: 7

  # 端到端测试 (End-to-End Tests)
  # STATUS: SKIPPED
  # REASON: Playwright not configured yet
  # TODO: Enable this job once Playwright is set up and e2e tests are written
  # TODO: Add test:e2e script to package.json with Playwright
  # TODO: Create e2e test suites for critical user flows
  # TODO: Add visual regression testing
  e2e:
    name: 端到端测试
    runs-on: ubuntu-latest
    if: false # Skip until Playwright is configured
    needs: [build]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 运行 E2E 测试
        run: |
          if [ "${{ matrix.device }}" = "mobile" ]; then
            npm run test:e2e --project="Mobile*" --browser=${{ matrix.browser }}
          else
            npm run test:e2e --project="Desktop*" --browser=${{ matrix.browser }}
          fi

      - name: 上传 E2E 测试结果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.device }}
          path: |
            test-results/
            playwright-report/

  # ============================================================================
  # OPTIONAL JOBS - These won't block the pipeline if they fail
  # ============================================================================

  # 性能测试 (Performance Testing)
  # STATUS: SKIPPED
  # REASON: Lighthouse is not configured yet
  # TODO: Enable this job once Lighthouse CI is set up and configured
  # TODO: Add lighthouserc.json configuration file
  # TODO: Define performance budgets for key metrics
  # TODO: Set up Lighthouse CI server for historical tracking
  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    if: false # Skip until Lighthouse is configured
    needs: [build]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: 安装 Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 运行 Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 上传性能报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # 安全扫描 (Security Scanning)
  # STATUS: ACTIVE (OPTIONAL)
  # This job runs npm audit but won't block deployment if vulnerabilities are found
  # Failures are reported but don't prevent deployment
  # TODO: Add Trivy scanning when Docker setup is complete
  # TODO: Add OWASP dependency check
  # TODO: Add secret scanning
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    continue-on-error: true # Make the job optional (allow failure)
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: npm audit
        run: |
          npm audit --audit-level high
          npm audit --json > npm-audit.json
        continue-on-error: true

      - name: 上传安全扫描结果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: npm-audit.json

  # ============================================================================
  # DEPLOYMENT JOBS - Conditional based on branch
  # ============================================================================

  # 部署到测试环境 (Deploy to Staging)
  # Triggers on: Push to 'develop' branch
  # Dependencies: lint, build (test jobs are skipped)
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [lint, build] # Only lint and build are required; test jobs are skipped
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.lowproject.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: 部署到 Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # 部署到生产环境 (Deploy to Production)
  # Triggers on: Push to 'main' branch
  # Dependencies: lint, build (security is optional and won't block)
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [lint, build] # Only lint and build are required; security is optional and won't block
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://lowproject.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: 部署到 Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 通知部署成功
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 生产环境部署成功！'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 通知部署失败
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ 生产环境部署失败！'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # CLEANUP JOBS - Housekeeping tasks
  # ============================================================================

  # 清理工作 (Cleanup)
  # Removes old artifacts and cleans up Docker cache
  cleanup:
    name: 清理工作
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 清理旧的构建产物
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            build-development
            test-results-*
          failOnError: false

      - name: 清理 Docker 缓存
        run: docker system prune -f
